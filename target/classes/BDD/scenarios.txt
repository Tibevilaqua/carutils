#Task1 - Create hello world end point

    Given: the server up and running
    When:  A GET request be performed
    Then:  A json result saying "hello world" will be returned


#Task2 - Sending project to git hub

    Given: A repository created on git hub
    When:  A new story be implemented
    Then:  The project must be delivered to the repository


#Task3 - Installing framework for tests

    Given: A project already created
    When:  New code be developed
    Then:  Tests must be written to guarantee the quality of the code

#Task4 - Creating endpoint to search OIL

    Given: There's an OIL registered in our system
    When:  the end point (/oil/1) be accessed
    Then:  the corresponded OIL to the ID 1 will be returned (mocked)

#Task5 - Creating default not found message

    Given: There's an OIL registered in our system
    When:  the end point (/oil/1) be requested
    AND    there's no oil corresponding with the ID 1
    Then:  A message of OIL not found will be returned to the client

#Task6 - Start searching information from the database

    Given: There's an OIL registered in our system
    When:  the end point (/oil/1) be accessed
    Then:  the corresponded OIL to the ID 1 will be returned
    And    the code {200 OK} will be returned

#Task7 - Start saving Oil products

    Given: the system is up and running
    When:  the end point (/oil) be accessed
    AND    the user try to save a new Oil like:
    {
        "name": "My Oil Test"
        ,"type": "TYPE_5W_30"
        ,"description": "My description"
    }
    Then:  the corresponded OIL to the ID 1 will be returned
    AND  the code {201 create} will be returned


#Task8 - Does not allow to save Oil with duplicated names

    Given: the system is up and running
    When:  the end point (/oil) be accessed
    AND    the user try to save a new Oil like:
    {
        "name": "My Oil Test"
        ,"type": "TYPE_5W_30"
        ,"description": "My description"
    }
    AND    there is an Oil object in the database with the same name "My Oil Test"
    Then:  and duplicated error will be returned
    AND  the code {409 conflict} will be returned


#Task9 - Allow communication between Java script requests from the bodywork system

    Given: the server up and running
    When:  A GET request from bodywork system be performed
    Then:  the proper response must be returned

#Task10 - Start searching oil with Image

    Given: There's an OIL registered in our system
    When:  the end point (/oil/1) be accessed
    Then:  the corresponded OIL to the ID 1
    And :  its image in binary data will be returned
    And :  followed by the code {200 OK}


#Task11 - Start saving User

    Given: The system is up and running
    When:  the customer try to sign up sending the following information:
   {
       "name": "James"
       ,"surname": "Bond"
       ,"gender": "MALE"
       ,"birthDate": "1993-10-23"
   }
    Then:  the user will be persisted in the database
    AND  the code {201 create} will be returned


#Task12 - Allow communication between Java script requests from the bodywork system (Header  Content-Type)

    Given: the server up and running
    When:  A GET request from bodywork system be performed
    Then:  the proper response must be returned

#Task13 - return errors in a while that the front-end can understand and propagate the message to the user

    Given: the server up and running
    When:  An error occur
    Then:  An understandable message should be returned


#Task14 - Saving User - Adding fields email and password

    Given: The system is up and running
    When:  the customer try to sign up sending the following information:
   {
       "name": "James"
       ,"surname": "Bond"
       ,"gender": "MALE"
       ,"birthDate": "1993-10-23"
       ,"email": "james.bond@007.com"
       ,"password":"123456"
   }
    Then:  the user will be persisted in the database
    AND  the code {201 create} will be returned


#Task15 - Saving User - email field validation

    Given: The system is up and running
    When:  the customer try to sign up and the email field is not filled properly like below
   {
       ,"email": "james.bond@007.com"
   }
    Then:  the user will receive a message that the email is invalid


#Task16 - Saving User - email not duplicate allowed

    Given: The system is up and running
    When:  The user try to save himself with an email that already exists in the database
    Then:  the user will receive a message that the email is already registered


#Task17 - Validation message - Start returning description of the error

    Given: The system is up and running
    When:  Some validation error be thrown
    Then:  The cause of the error should return together with its field


#Task18 - Creating endpoint to search Brand

    Given: There's a Brand registered in our system
    When:  the end point (/brand/1) be accessed
    Then:  the corresponded Brand to the ID 1 will be returned

#Task19 - Creating endpoint to search Model

    Given: A selected Brand
    AND:   There's a model registered in the system for this brand
    When:  The end point (/model?brand="Peugeot") be accessed
    Then:  A list of Models corresponding to the Brand will be returned.